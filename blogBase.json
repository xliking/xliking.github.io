{"singlePage": [], "startSite": "", "filingNum": "", "onePageListNum": 15, "commentLabelColor": "#006b75", "yearColorList": ["#bc4c00", "#0969da", "#1f883d", "#A333D0"], "i18n": "CN", "themeMode": "manual", "dayTheme": "light", "nightTheme": "dark", "urlMode": "pinyin", "script": "", "style": "", "indexScript": "", "indexStyle": "", "bottomText": "", "showPostSource": 1, "iconList": {}, "UTC": 8, "rssSplit": "sentence", "exlink": {}, "title": "\u6728\u6c60", "subTitle": "JAVA\u65e5\u5e38\u7b14\u8bb0", "avatarUrl": "https://xlike.email/images/tx.jpg", "GMEEK_VERSION": "last", "postListJson": {"P2": {"htmlDir": "docs/post/SpingBoot-shi-xian-zhu-jie-dao-chu-Excel-wen-jian.html", "labels": ["documentation"], "postTitle": "SpingBoot\u5b9e\u73b0\u6ce8\u89e3\u5bfc\u51faExcel\u6587\u4ef6", "postUrl": "post/SpingBoot-shi-xian-zhu-jie-dao-chu-Excel-wen-jian.html", "postSourceUrl": "https://github.com/xliking/xliking.github.io/issues/2", "commentNum": 0, "wordCount": 6749, "description": "**\u7b2c\u4e00\u6b65\uff0c\u5bfc\u5165poi\u7684Maven\u4f9d\u8d56**\r\n```\r\n        <dependency>\r\n            <groupId>org.apache.poi</groupId>\r\n            <artifactId>poi-ooxml</artifactId>\r\n            <version>5.2.3</version>\r\n        </dependency>\r\n```\r\n**\u7b2c\u4e8c\u6b65\uff0c\u5b9e\u73b0\u81ea\u5b9a\u4e49\u6ce8\u89e3**\r\n\r\n```\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Target(ElementType.FIELD)\r\npublic @interface ExcelColumn {\r\n    String value() default '';\r\n\r\n}\r\n```\r\n**\u7b2c\u4e09\u6b65\uff0c\u7f16\u5199\u5bfc\u51fa\u7684\u5de5\u5177\u7c7b**\r\n\r\n```\r\n\r\n/**\r\n * \u7c7b\u4e0a\u9762\u7684\u5b57\u6bb5 -> \u52a0\u4e0a  @ExcelColumn('\u8868\u5934') \u7684\u6ce8\u89e3\r\n * @author \u6728\u6c60\r\n */\r\n@Slf4j\r\npublic class ExcelUtil {\r\n\r\n    public static <T> void write(List<T> objectList, OutputStream fileOut) {\r\n\r\n        Workbook workbook = new XSSFWorkbook();\r\n        try {\r\n            Sheet sheet = workbook.createSheet('Sheet1');\r\n            createHeader(sheet, objectList.get(0).getClass());\r\n            createRows(sheet, objectList);\r\n            workbook.write(fileOut);\r\n        } catch (IOException e) {\r\n            log.error('Error writing to Excel file: {}', e.getMessage());\r\n        } finally {\r\n            try {\r\n                fileOut.close();\r\n                workbook.close();\r\n            } catch (IOException e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u5199\u5165Excel\u6587\u4ef6 Sheet1 \u4e2d\r\n     * @param objectList \u5b58\u50a8\u5bf9\u8c61\u7684\u96c6\u5408\r\n     * @param filePath \u6587\u4ef6\u8def\u5f84 \u4e3a\u7a7a \u5219\u662f\u684c\u9762\u8def\u5f84\r\n     * @return \u6587\u4ef6\u8def\u5f84\r\n     * @param <T> \u6cdb\u578b\r\n     */\r\n    public static <T> String writeToExcel(List<T> objectList, String filePath) {\r\n        if (filePath == null || filePath.isEmpty()) {\r\n            filePath = getDefaultDesktopPath() + '\\\\' + objectList.get(0).getClass().getSimpleName() + '.xlsx';\r\n        }\r\n        byte[] utf8Bytes = filePath.getBytes(StandardCharsets.UTF_8);\r\n        String newFileName = new String(utf8Bytes, StandardCharsets.UTF_8);\r\n        try (Workbook workbook = new XSSFWorkbook(); FileOutputStream fileOut = new FileOutputStream(newFileName)) {\r\n            Sheet sheet = workbook.createSheet('Sheet1');\r\n            Font font = getFont(sheet);\r\n            createHeader(sheet, objectList.get(0).getClass(), font);\r\n            createRows(sheet, objectList);\r\n//            autoSizeColumns(sheet);\r\n            workbook.write(fileOut);\r\n        } catch (IOException e) {\r\n            log.error('Error writing to Excel file: {}', e.getMessage());\r\n        }\r\n        return newFileName;\r\n    }\r\n\r\n    /**\r\n     * \u521b\u5efa\u8868\u5934\r\n     * @param sheet \u8868\u5355\u5bf9\u8c61\r\n     * @param clazz \u7c7b\u5bf9\u8c61\r\n     * @param <T> \u6cdb\u578b\r\n     */\r\n    private static <T> void createHeader(Sheet sheet, Class<T> clazz) {\r\n        createHeader(sheet, clazz, null);\r\n    }\r\n\r\n    private static <T> void createHeader(Sheet sheet, Class<T> clazz, Font headerFont) {\r\n\r\n        CellStyle headerCellStyle = sheet.getWorkbook().createCellStyle();\r\n        if (null != headerFont) {\r\n            headerCellStyle.setFont(headerFont);\r\n        }\r\n\r\n        Row headerRow = sheet.createRow(0);\r\n        List<String> propertyNames = new ArrayList<>();\r\n        for (Field field : clazz.getDeclaredFields()) {\r\n            ExcelColumn excelColumnAnnotation = field.getAnnotation(ExcelColumn.class);\r\n            if (excelColumnAnnotation != null) {\r\n                propertyNames.add(excelColumnAnnotation.value());\r\n            }\r\n        }\r\n        int cellNum = 0;\r\n        for (String propertyName : propertyNames) {\r\n            Cell headerCell = headerRow.createCell(cellNum++);\r\n            headerCell.setCellValue(propertyName);\r\n            headerCell.setCellStyle(headerCellStyle);\r\n        }\r\n    }\r\n\r\n    private static @NotNull Font getFont(Sheet sheet) {\r\n        Font headerFont = sheet.getWorkbook().createFont();\r\n        headerFont.setBold(true);\r\n        headerFont.setFontHeightInPoints((short) 14);\r\n        return headerFont;\r\n    }\r\n\r\n    /**\r\n     * \u521b\u5efa\u6bcf\u884c\u7684\u6570\u636e\r\n     * @param sheet \u8868\u5355\r\n     * @param objectList \u5bf9\u8c61\u96c6\u5408\r\n     * @param <T> \u6cdb\u578b\r\n     */\r\n    private static <T> void createRows(Sheet sheet, List<T> objectList) {\r\n        int rowNum = 1;\r\n        for (T object : objectList) {\r\n            Row row = sheet.createRow(rowNum++);\r\n            int cellNum = 0;\r\n            for (Field field : object.getClass().getDeclaredFields()) {\r\n                ExcelColumn excelColumnAnnotation = field.getAnnotation(ExcelColumn.class);\r\n                if (excelColumnAnnotation != null) {\r\n                    field.setAccessible(true);\r\n                    try {\r\n                        Object value = field.get(object);\r\n                        Cell cell = row.createCell(cellNum++);\r\n                        if (value != null) {\r\n                            if (value instanceof String) {\r\n                                cell.setCellValue((String) value);\r\n                            } else if (value instanceof Number) {\r\n                                cell.setCellValue(((Number) value).doubleValue());\r\n                            } else if (value instanceof Boolean) {\r\n                                cell.setCellValue((Boolean) value);\r\n                            } else {\r\n                                cell.setCellValue(value.toString());\r\n                            }\r\n                        } else {\r\n                            cell.setCellValue('');\r\n                        }\r\n                    } catch (IllegalAccessException e) {\r\n                        log.error('Error accessing field: {}', e.getMessage());\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private static void autoSizeColumns(Sheet sheet) {\r\n        for (int i = 0; i < sheet.getRow(0).getLastCellNum(); i++) {\r\n            sheet.autoSizeColumn(i);\r\n        }\r\n    }\r\n\r\n    private static String getDefaultDesktopPath() {\r\n        return System.getProperty('user.home') + '\\\\Desktop';\r\n    }\r\n\r\n    /**\r\n     *  kimi \u4e0d\u80fd\u8d85\u8fc7 131072 \u5b57\u6570\r\n     * \u8ba1\u7b97Excel\u6587\u4ef6\u4e2d\u7684\u5b57\u6570,\u53ea\u9002\u5408 Excel\u6587\u4ef6\u683c\u5f0f,\u4e0d\u5305\u542b\u7a7a\u683c \u548c \u7279\u6b8a\u7b26\u53f7\r\n     * @param filePath \u6587\u4ef6\u8def\u5f84\r\n     * @return \u5b57\u6570\r\n     */\r\n    public static int getWordCount(String filePath) {\r\n        Path excelPath = Paths.get(filePath);\r\n        try (InputStream fis = Files.newInputStream(excelPath);\r\n             Workbook workbook = new XSSFWorkbook(fis)) {\r\n            int wordCount = 0;\r\n            for (Sheet sheet : workbook) {\r\n                for (Row row : sheet) {\r\n                    for (Cell cell : row) {\r\n                        if (cell.getCellType() == CellType.STRING) {\r\n                            String cellValue = cell.getStringCellValue();\r\n                            if (cellValue != null) {\r\n                                wordCount += cellValue.length();\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return wordCount;\r\n        } catch (IOException e) {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n```\u3002", "top": 0, "createdAt": 1719487846, "style": "", "script": "", "ogImage": "https://xlike.email/images/tx.jpg", "createdDate": "2024-06-27", "dateLabelColor": "#bc4c00"}, "P4": {"htmlDir": "docs/post/SpingBoot-ji-cheng-xxl-job.html", "labels": ["documentation"], "postTitle": "SpingBoot\u96c6\u6210xxl-job", "postUrl": "post/SpingBoot-ji-cheng-xxl-job.html", "postSourceUrl": "https://github.com/xliking/xliking.github.io/issues/4", "commentNum": 0, "wordCount": 2079, "description": "**\u7b2c\u4e00\u6b65**\r\nxxl-job\uff0c\u6709\u5355\u72ec\u7684\u6570\u636e\u5e93\uff0c\u628a\u5bf9\u5e94\u7684\u8868\u5bfc\u5165\u8fdb\u53bb\r\n**\u7b2c\u4e8c\u6b65**\r\n\u7f16\u5199springboot\u4e2d\u7684\u914d\u7f6e\u6587\u4ef6\r\n```\r\nxxl:\r\n  enable: true  # \u662f\u5426\u542f\u7528 XXL-JOB\uff0ctrue \u8868\u793a\u542f\u7528\uff0cfalse \u8868\u793a\u7981\u7528\r\n  job:\r\n    admin:\r\n      addresses: http://xxl-job-xxx:8080/xxl-job-admin/  # XXL-JOB \u7ba1\u7406\u4e2d\u5fc3\u7684\u5730\u5740\uff0c\u7528\u4e8e\u4efb\u52a1\u7684\u7ba1\u7406\u548c\u8c03\u5ea6\r\n    executor:\r\n      app-name: financial-data-center  # \u6267\u884c\u5668\u7684\u5e94\u7528\u540d\u79f0\uff0c\u7528\u4e8e\u6807\u8bc6\u5177\u4f53\u7684\u6267\u884c\u5668\r\n      access-token: xxxxxx  # \u8bbf\u95ee\u4ee4\u724c\uff0c\u7528\u4e8e\u6267\u884c\u5668\u4e0e\u8c03\u5ea6\u4e2d\u5fc3\u4e4b\u95f4\u7684\u8eab\u4efd\u8ba4\u8bc1\r\n      log-path: ./logs/xxlJob  # \u6267\u884c\u5668\u65e5\u5fd7\u7684\u5b58\u50a8\u8def\u5f84\uff0c\u76f8\u5bf9\u4e8e\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\r\n      log-retention-days: 7  # \u65e5\u5fd7\u7684\u4fdd\u7559\u5929\u6570\uff0c\u8d85\u8fc7\u8fd9\u4e2a\u5929\u6570\u7684\u65e5\u5fd7\u5c06\u88ab\u81ea\u52a8\u6e05\u7406\r\n```\r\n**\u7b2c\u4e09\u6b65**\r\n\u7f16\u5199xxl-job\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u901a\u8fc7\u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u76f8\u5173\u53c2\u6570\uff0c\u521b\u5efa\u5e76\u521d\u59cb\u5316\u4e00\u4e2a XxlJobSpringExecutor \u5b9e\u4f8b\r\n```\r\n/**\r\n * xxl job\u914d\u7f6e\r\n * @author \u6728\u6c60\r\n */\r\n@Component\r\n@Slf4j\r\n@ConditionalOnProperty(prefix = 'xxl', name = 'enable', havingValue = 'true', matchIfMissing = true)\r\npublic class XxlJobConfig {\r\n\r\n    @Value('${xxl.job.admin.addresses}')\r\n    private String adminAddresses;\r\n\r\n    @Value('${xxl.job.executor.app-name}')\r\n    private String appName;\r\n\r\n    @Value('${xxl.job.executor.log-retention-days}')\r\n    private Integer logRetentionDay;\r\n\r\n    @Value('${xxl.job.executor.access-token}')\r\n    private String accessToken;\r\n\r\n    @Value('${xxl.job.executor.log-path}')\r\n    private String logPath;\r\n\r\n    @Bean\r\n    public XxlJobSpringExecutor xxlJobExecutor() {\r\n        log.info('>>>>>>>>>>> xxl-job config init.');\r\n        XxlJobSpringExecutor xxlJobSpringExecutor = new XxlJobSpringExecutor();\r\n        xxlJobSpringExecutor.setAdminAddresses(adminAddresses);\r\n        xxlJobSpringExecutor.setAppname(appName);\r\n        xxlJobSpringExecutor.setAccessToken(accessToken);\r\n        xxlJobSpringExecutor.setLogPath(logPath);\r\n        xxlJobSpringExecutor.setLogRetentionDays(logRetentionDay);\r\n        return xxlJobSpringExecutor;\r\n    }\r\n}\r\n\r\n```\r\n**\u7b2c\u56db\u6b65**\r\n\u7f16\u5199xxl-job\u7684\u5b9a\u65f6\u4efb\u52a1\r\n```\r\n/**\r\n * @author \u6728\u6c60\r\n */\r\n@Component\r\n@AllArgsConstructor\r\npublic class XxlJobTask {\r\n    @XxlJob('cs')\r\n    public ReturnT<String> cs() {\r\n        LOGGER.info('\u6d4b\u8bd5');\r\n        return ReturnT.SUCCESS;\r\n    }\r\n}\r\n```\r\n**\u53e6\u63d0 - \u5982\u4f55\u83b7\u53d6xxl-job\u7684\u591a\u4e2a\u53c2\u6570**\r\n```\r\n  String param = XxlJobHelper.getJobParam();\r\n  String[] methodParams = param.split(',');\r\n```\u3002", "top": 0, "createdAt": 1719560793, "style": "", "script": "", "ogImage": "https://xlike.email/images/tx.jpg", "createdDate": "2024-06-28", "dateLabelColor": "#bc4c00"}}, "singeListJson": {}, "labelColorDict": {"bug": "#d73a4a", "documentation": "#0075ca", "duplicate": "#cfd3d7", "enhancement": "#a2eeef", "good first issue": "#7057ff", "help wanted": "#008672", "invalid": "#e4e669", "question": "#d876e3", "wontfix": "#ffffff"}, "displayTitle": "\u6728\u6c60", "faviconUrl": "https://xlike.email/images/tx.jpg", "ogImage": "https://xlike.email/images/tx.jpg", "homeUrl": "https://xliking.github.io", "prevUrl": "disabled", "nextUrl": "disabled"}