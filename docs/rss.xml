<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>木池</title><link>https://xliking.github.io</link><description>JAVA日常笔记</description><copyright>木池</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://xlike.email/images/tx.jpg</url><title>avatar</title><link>https://xliking.github.io</link></image><lastBuildDate>Sun, 30 Jun 2024 10:03:23 +0000</lastBuildDate><managingEditor>木池</managingEditor><ttl>60</ttl><webMaster>木池</webMaster><item><title>记录一些好玩的东西</title><link>https://xliking.github.io/post/ji-lu-yi-xie-hao-wan-de-dong-xi.html</link><description>**gpts生成prompt**&#13;
```&#13;
https://chatgpt.com/g/g-tc0eHXdgb-romidjourneyro-mj-prompt-generator-v6&#13;
```。</description><guid isPermaLink="true">https://xliking.github.io/post/ji-lu-yi-xie-hao-wan-de-dong-xi.html</guid><pubDate>Sun, 30 Jun 2024 10:02:57 +0000</pubDate></item><item><title>Java并发</title><link>https://xliking.github.io/post/Java-bing-fa.html</link><description>#### 基础概念&#13;
&#13;
**同步和异步**&#13;
同步和异步通常用来形容一次方法调用。</description><guid isPermaLink="true">https://xliking.github.io/post/Java-bing-fa.html</guid><pubDate>Sun, 30 Jun 2024 09:32:08 +0000</pubDate></item><item><title>SQL调优</title><link>https://xliking.github.io/post/SQL-diao-you.html</link><description>#### 避免使用 SELECT * &#13;
&#13;
- SELECT * 会消耗更多的 CPU&#13;
&#13;
- SELECT * 无用字段增加网络带宽资源消耗，增加数据传输时间，尤其是大字段（如 varchar、blob、text）&#13;
&#13;
- SELECT * 无法使用 MySQL 优化器覆盖索引的优化&#13;
&#13;
- SELECT &lt;字段列表&gt; 可减少表结构变更带来的影响&#13;
#### 分页优化 &#13;
&#13;
普通的分页在数据量小的时候耗费时间还是比较短的。</description><guid isPermaLink="true">https://xliking.github.io/post/SQL-diao-you.html</guid><pubDate>Sun, 30 Jun 2024 09:04:00 +0000</pubDate></item><item><title>服务器部署SpringBoot+Vue项目，并实现https访问</title><link>https://xliking.github.io/post/fu-wu-qi-bu-shu-SpringBoot%2BVue-xiang-mu-%EF%BC%8C-bing-shi-xian-https-fang-wen.html</link><description>**首先我们需要一台服务器，自己买一个就行，但必须要备案，一个域名**&#13;
所以推荐一个 [国外免备案，可以支付宝支付](https://my.racknerd.com/)&#13;
买完之后，安装一个[宝塔面板](https://www.bt.cn/)，官网支持远程安装&#13;
Centos安装脚本&#13;
```&#13;
yum install -y wget &amp;&amp; wget -O install.sh https://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh ed8484bec&#13;
```&#13;
Ubuntu/Deepin安装脚本&#13;
```&#13;
wget -O install.sh https://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; sudo bash install.sh ed8484bec&#13;
```&#13;
**第一步，我们在宝塔面板安装Nginx**&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
。</description><guid isPermaLink="true">https://xliking.github.io/post/fu-wu-qi-bu-shu-SpringBoot%2BVue-xiang-mu-%EF%BC%8C-bing-shi-xian-https-fang-wen.html</guid><pubDate>Fri, 28 Jun 2024 11:15:09 +0000</pubDate></item><item><title>JRebel无限使用-JAVA直接运行-需要JDK11及以上</title><link>https://xliking.github.io/post/JRebel-wu-xian-shi-yong--JAVA-zhi-jie-yun-xing---xu-yao-JDK11-ji-yi-shang.html</link><description>```&#13;
import javax.swing.*;&#13;
import java.awt.*;&#13;
import java.awt.event.ActionEvent;&#13;
import java.awt.event.ActionListener;&#13;
import java.io.File;&#13;
import java.io.FileOutputStream;&#13;
import java.net.URI;&#13;
import java.net.http.HttpClient;&#13;
import java.net.http.HttpRequest;&#13;
import java.net.http.HttpResponse;&#13;
import java.util.*;&#13;
&#13;
public class JrebelMain {&#13;
&#13;
    private final static String url = 'https://headless.zeroturnaround.com/public/api/registrations/add-jrebel-evaluation.php';&#13;
&#13;
    public static void main(String[] args) {&#13;
&#13;
        JFrame jf = new JFrame('JrebelEvaluation');&#13;
        jf.setSize(240, 320);&#13;
        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);&#13;
        jf.setLocationRelativeTo(null);&#13;
&#13;
        // 创建内容面板，指定使用 流式布局&#13;
        JPanel panel = new JPanel(new FlowLayout(FlowLayout.CENTER, 100, 5));&#13;
&#13;
&#13;
        JButton button = new JButton();&#13;
        button.setText('Get License');&#13;
        button.addActionListener(new JrebelMain.ButtonClick());&#13;
        panel.add(button);&#13;
&#13;
&#13;
        jf.setContentPane(panel);&#13;
        jf.setVisible(true);        &#13;
&#13;
    }&#13;
&#13;
&#13;
    public static int randNumber(int max, int min) {&#13;
        return min + (int) (Math.random() * (max - min + 1));&#13;
    }&#13;
&#13;
    public static String uuid() {&#13;
        return UUID.randomUUID().toString().replaceAll('-', '');&#13;
    }&#13;
&#13;
    public static String subText(String source, String startText, String endText, int offSet) {&#13;
        int start = source.indexOf(startText, offSet) + 1;&#13;
        if (start == -1) {&#13;
            return null;&#13;
        }&#13;
        int end = source.indexOf(endText, start + offSet + startText.length() - 1);&#13;
        if (end == -1) {&#13;
            end = source.length();&#13;
        }&#13;
        return source.substring(start + startText.length() - 1, end);&#13;
    }&#13;
&#13;
    static class ButtonClick implements ActionListener {&#13;
&#13;
&#13;
        @Override&#13;
        public void actionPerformed(ActionEvent e) {&#13;
            try {&#13;
                action();&#13;
            } catch (Exception ex) {&#13;
                ex.printStackTrace();&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    private static void action() throws Exception {&#13;
        final File jrebelHome = new File(System.getProperty('user.home') + '/.jrebel');&#13;
        final String[] jrebelFiless = new String[]{&#13;
                'jrebel.prefs',&#13;
                'jrebel.prefs.lock',&#13;
                'jrebel.properties'&#13;
        };&#13;
&#13;
        // 删除 jrebel 配置文件&#13;
        Arrays.stream(jrebelFiless).map(it -&gt; new File(jrebelHome.getAbsolutePath() + '/' + it)).filter(it -&gt; it.exists()).forEach(it -&gt; it.delete());&#13;
&#13;
&#13;
        //write license jrebel.lic&#13;
        StringBuffer phone = new StringBuffer();&#13;
        for (int i = 0; i &lt; randNumber(6, 11); i++) {&#13;
            phone.append(randNumber(0, 9));&#13;
        }&#13;
        Map&lt;String, Object&gt; body = new HashMap&lt;&gt;() {{&#13;
            put('referer_url', 'IDE');&#13;
            put('email', uuid() + '%40qq.com');&#13;
            put('first_name', uuid().substring(0, randNumber(3, 5)));&#13;
            put('last_name', uuid().substring(0, randNumber(3, 6)));&#13;
            put('phone', phone.toString());&#13;
            put('organization', uuid().substring(0, randNumber(1, 5)));&#13;
            put('output_format', 'json');&#13;
            put('client_os', 'Windows+11');&#13;
            put('guid', uuid());&#13;
            put('jrebel-version', '2023.1.2');&#13;
            put('ide', 'intellij');&#13;
            put('ide-product', 'IU');&#13;
            put('ide-version', '2022.3.3');&#13;
            put('jvm.version', '17.0.' + randNumber(0, 20));&#13;
            put('jvm.vendor', 'JetBrains+s.r.o');&#13;
            put('os.name', 'Windows+11');&#13;
        }};&#13;
&#13;
        String queryText = String.join('&amp;', body.entrySet().stream().map(it -&gt; it.getKey() + '=' + it.getValue()).toArray(String[]::new));&#13;
        final URI uri = URI.create(url + '?' + queryText);&#13;
        final HttpClient httpClient = HttpClient.newBuilder()&#13;
                .build();&#13;
        final HttpRequest request = HttpRequest.newBuilder()&#13;
                .version(HttpClient.Version.HTTP_1_1)&#13;
                .GET()&#13;
                .uri(uri)&#13;
                .build();&#13;
        String ret = httpClient.send(request, HttpResponse.BodyHandlers.ofString()).body();&#13;
        String content = subText(ret, 'content\':\'', '\'', 0);&#13;
        System.out.println(content);&#13;
        byte[] bin = Base64.getMimeDecoder().decode(content);&#13;
        File jrebelLicFile = new File(jrebelHome.getAbsolutePath() + '/jrebel.lic');&#13;
        FileOutputStream jrebelLicOutputStream = new FileOutputStream(jrebelLicFile);&#13;
        jrebelLicOutputStream.write(bin);&#13;
        jrebelLicOutputStream.flush();&#13;
        jrebelLicOutputStream.close();&#13;
&#13;
&#13;
        //write jrebel.properties&#13;
        FileOutputStream jrebelPropertiesOutputStream = new FileOutputStream(jrebelHome.getAbsolutePath() + '/jrebel.properties');&#13;
        jrebelPropertiesOutputStream.write(('rebel.license=' + jrebelLicFile.getAbsolutePath() + '\r\n').getBytes());&#13;
        jrebelPropertiesOutputStream.write(('rebel.preferred.license=0\r\n').getBytes());&#13;
        jrebelPropertiesOutputStream.write(('rebel.properties.version=2\r\n').getBytes());&#13;
        jrebelPropertiesOutputStream.flush();&#13;
        jrebelPropertiesOutputStream.close();&#13;
&#13;
&#13;
        JOptionPane.showMessageDialog(null, 'please restart idea ,  license :  \n' + jrebelLicFile.getAbsolutePath());&#13;
&#13;
    }&#13;
&#13;
&#13;
}&#13;
```。</description><guid isPermaLink="true">https://xliking.github.io/post/JRebel-wu-xian-shi-yong--JAVA-zhi-jie-yun-xing---xu-yao-JDK11-ji-yi-shang.html</guid><pubDate>Fri, 28 Jun 2024 10:57:17 +0000</pubDate></item><item><title>SpringBoot分享一个简单的逆向</title><link>https://xliking.github.io/post/SpringBoot-fen-xiang-yi-ge-jian-dan-de-ni-xiang.html</link><description>好处是，可以绕开前端已经写死的参数或者规定，交给我们自己去按照格式组装参数，达到我们想要的目的&#13;
&#13;
导入Maven依赖，离不开okhttp和json工具包&#13;
&#13;
```JAVA&#13;
&lt;dependency&gt;&#13;
    &lt;groupId&gt;com.alibaba.fastjson2&lt;/groupId&gt;&#13;
    &lt;artifactId&gt;fastjson2&lt;/artifactId&gt;&#13;
    &lt;version&gt;2.0.40&lt;/version&gt;&#13;
&lt;/dependency&gt;&#13;
&lt;dependency&gt;&#13;
    &lt;groupId&gt;com.squareup.okhttp3&lt;/groupId&gt;&#13;
    &lt;artifactId&gt;okhttp&lt;/artifactId&gt;&#13;
    &lt;version&gt;4.9.1&lt;/version&gt;&#13;
&lt;/dependency&gt;&#13;
```&#13;
&#13;
**第一步**&#13;
&#13;
首先打开一个网站，以这个网站 https://twoapi-ui.qiangtu.com/ 为例&#13;
&#13;
点击对话，来到对话窗口，右键点击 **检查**，来到**NetWork**，选中，**Fetch/xhr**&#13;
&#13;
来到对话框，输入文本，点击发送按钮，此时会多一个请求，点击进去&#13;
&#13;
![image-20240628183518233](https://github.com/xliking/xliking.github.io/assets/115143710/97f57003-196e-4e23-98b9-9e01beca2ec6)&#13;
&#13;
&#13;
点击Header，会发现**URL**和**Method** ，往下面翻，会有一个最重要的**Request Header**&#13;
&#13;
找到 **Authorization**，记住 **Bearer sk-1e49426A5A63Ee3C33256F17EF152C02**&#13;
&#13;
找到 **Content-Type**，记住 **application/json**，这两个都很重要&#13;
&#13;
**第二步**&#13;
&#13;
因为是post请求，他的参数都在**payload**中&#13;
&#13;
我们进去之后，找到他的请求体&#13;
&#13;
```json&#13;
{&#13;
  'messages': [&#13;
    {&#13;
      'role': 'system',&#13;
      'content': '你是强大的智谱AI，快来帮助解决我的问题吧'&#13;
    },&#13;
    {&#13;
      'role': 'user',&#13;
      'content': '1'&#13;
    }&#13;
  ],&#13;
  'stream': true,&#13;
  'model': 'gpt-3.5-turbo-1106',&#13;
  'temperature': 0.5,&#13;
  'presence_penalty': 0,&#13;
  'frequency_penalty': 0,&#13;
  'top_p': 1&#13;
}&#13;
```&#13;
&#13;
然后就到了java代码环节&#13;
&#13;
```java&#13;
//我们就要定义他们的请求路径，和 找到的Authorization(就是API_KEY)&#13;
private static final Integer TIMEOUT_MAX = 5;&#13;
private static final String API_URL = 'https://twoapi-ui.qiangtu.com/v1/chat/completions';&#13;
private static final String API_KEY = 'sk-1e49426A5A63Ee3C33256F17EF152C02';&#13;
private static final MediaType JSON_MEDIA_TYPE = MediaType.get('application/json; charset=utf-8');&#13;
&#13;
private static final OkHttpClient CLIENT = new OkHttpClient.Builder()&#13;
        .callTimeout(TIMEOUT_MAX, TimeUnit.MINUTES)&#13;
        .readTimeout(TIMEOUT_MAX, TimeUnit.MINUTES)&#13;
        .build();&#13;
```&#13;
&#13;
构建请求体，我一般都是用的JSONObject&#13;
我这个只是实例并不完整&#13;
&#13;
```java&#13;
JSONObject jsonBody = new JSONObject();&#13;
jsonBody.put('stream', false);&#13;
  JSONArray messages = new JSONArray();&#13;
        messages.add(new JSONObject().fluentPut('role', 'system').fluentPut('content', '[midjourney] 根据要求绘图'));&#13;
        messages.add(new JSONObject().fluentPut('role', 'user').fluentPut('content', prompt));&#13;
        jsonBody.put('messages', messages);&#13;
RequestBody body = RequestBody.create(JSON_MEDIA_TYPE, jsonBody.toJSONString());&#13;
```&#13;
&#13;
发送请求&#13;
&#13;
```java&#13;
Request request = new Request.Builder()&#13;
        .url(API_URL)&#13;
        .post(body)&#13;
        .addHeader('Authorization', 'Bearer ' + API_KEY)&#13;
        .addHeader('Content-Type', 'application/json')&#13;
        .build();&#13;
  try (Response response = CLIENT.newCall(request).execute()) {&#13;
            if (!response.isSuccessful()) throw new IOException('Unexpected code ' + response);&#13;
      // 请求的结果大多数都在  response.body().string() ，极少数 流式请求需要自己找&#13;
            System.out.println(response.body().string());&#13;
        }&#13;
```。</description><guid isPermaLink="true">https://xliking.github.io/post/SpringBoot-fen-xiang-yi-ge-jian-dan-de-ni-xiang.html</guid><pubDate>Fri, 28 Jun 2024 10:51:15 +0000</pubDate></item><item><title>Redis的缓存更新策略</title><link>https://xliking.github.io/post/Redis-de-huan-cun-geng-xin-ce-lve.html</link><description>#### Cache Aside Pattern（旁路缓存模式）&#13;
&#13;
**Cache Aside Pattern 是我们平时使用比较多的一个缓存读写模式，比较适合读请求比较多的场景。</description><guid isPermaLink="true">https://xliking.github.io/post/Redis-de-huan-cun-geng-xin-ce-lve.html</guid><pubDate>Fri, 28 Jun 2024 09:59:03 +0000</pubDate></item><item><title>如何实现大文件快速上传</title><link>https://xliking.github.io/post/ru-he-shi-xian-da-wen-jian-kuai-su-shang-chuan.html</link><description>#### 分片上传&#13;
&#13;
1. **断点续传** ：上传文件中途暂停或失败（比如遇到网络问题）之后，不需要重新上传，只需要上传那些未成功上传的文件分片即可。</description><guid isPermaLink="true">https://xliking.github.io/post/ru-he-shi-xian-da-wen-jian-kuai-su-shang-chuan.html</guid><pubDate>Fri, 28 Jun 2024 09:40:14 +0000</pubDate></item><item><title> 如何设计一个站内消息系统</title><link>https://xliking.github.io/post/%20-ru-he-she-ji-yi-ge-zhan-nei-xiao-xi-xi-tong.html</link><description>#### **简介**&#13;
&#13;
在某一个APP中，当有其他用户关注我们或者私信我们的行为时，我们会收到相关的消息。</description><guid isPermaLink="true">https://xliking.github.io/post/%20-ru-he-she-ji-yi-ge-zhan-nei-xiao-xi-xi-tong.html</guid><pubDate>Fri, 28 Jun 2024 09:20:40 +0000</pubDate></item><item><title>如何设计一个秒杀系统</title><link>https://xliking.github.io/post/ru-he-she-ji-yi-ge-miao-sha-xi-tong.html</link><description>秒杀系统的业务逻辑非常简单，一般就是下订单减库存，难点在于我们如何保障秒杀能够顺利进行。</description><guid isPermaLink="true">https://xliking.github.io/post/ru-he-she-ji-yi-ge-miao-sha-xi-tong.html</guid><pubDate>Fri, 28 Jun 2024 08:55:17 +0000</pubDate></item><item><title>SpringBoot集成Midjourney绘画</title><link>https://xliking.github.io/post/SpringBoot-ji-cheng-Midjourney-hui-hua.html</link><description>**步骤一**&#13;
&#13;
[此处申请免费的KEY](https://app.prodia.com/api)&#13;
&#13;
如 ：b9b42bbb-e5a5-4e55-a71d-xxxxxxxxx&#13;
&#13;
**步骤二**&#13;
&#13;
这是他的[API文档](https://docs.prodia.com/reference/generate)&#13;
&#13;
我们用的是java，所以就得用okhttp和阿里的fastjson&#13;
&#13;
**第三步**&#13;
&#13;
导入Maven依赖&#13;
&#13;
```java&#13;
&lt;dependency&gt;&#13;
    &lt;groupId&gt;com.alibaba.fastjson2&lt;/groupId&gt;&#13;
    &lt;artifactId&gt;fastjson2&lt;/artifactId&gt;&#13;
    &lt;version&gt;2.0.40&lt;/version&gt;&#13;
&lt;/dependency&gt;&#13;
&lt;dependency&gt;&#13;
    &lt;groupId&gt;com.squareup.okhttp3&lt;/groupId&gt;&#13;
    &lt;artifactId&gt;okhttp&lt;/artifactId&gt;&#13;
    &lt;version&gt;4.9.1&lt;/version&gt;&#13;
&lt;/dependency&gt;&#13;
&#13;
```&#13;
&#13;
**第四步**&#13;
&#13;
编写请求工具类&#13;
&#13;
```java&#13;
**&#13;
 * @author 木池&#13;
 */&#13;
public class Draw_StableDrawUtil {&#13;
&#13;
    private static final String API_KEY = '自己申请的key';&#13;
    private static final String HEAD_TYPE = 'Content-Type';&#13;
    private static final String HEAD_ACCEPT = 'accept';&#13;
    private static final String HEAD_VALUE = 'application/json';&#13;
    private static final String HEADER_X_PRODIA_KEY = 'X-Prodia-Key';&#13;
    private static final String MODELS_URL = 'https://api.prodia.com/v1/sdxl/generate';&#13;
    private static final Integer TIMEOUT_MAX = 5;&#13;
    private static final String BASE_URL = 'https://api.prodia.com/v1/job/%s';&#13;
    private static final long POLL_INTERVAL_MS = 3000;&#13;
&#13;
&#13;
    private static final OkHttpClient CLIENT = new OkHttpClient.Builder()&#13;
            .callTimeout(TIMEOUT_MAX, TimeUnit.MINUTES)&#13;
            .readTimeout(TIMEOUT_MAX, TimeUnit.MINUTES)&#13;
            .build();&#13;
    private static final Logger log = LoggerFactory.getLogger(Draw_StableDrawUtil.class);&#13;
&#13;
&#13;
&#13;
    public static String generateText(String content) throws IOException {&#13;
        JSONObject object = JSONObject.parseObject(content);&#13;
        String prompt = (String) object.get('prompt');&#13;
        try {&#13;
            prompt = TranslatorsUtils.textTrans(prompt);&#13;
        } catch (Exception e) {&#13;
            log.error(e.getMessage());&#13;
        }&#13;
        object.put('prompt', prompt);&#13;
        String requestBodyJson = object.toJSONString();&#13;
        MediaType mediaType = MediaType.parse(HEAD_VALUE);&#13;
        Request request = new Request.Builder()&#13;
                .url(MODELS_URL)&#13;
                .post(RequestBody.create(mediaType, requestBodyJson))&#13;
                .addHeader(HEAD_ACCEPT, HEAD_VALUE)&#13;
                .addHeader(HEAD_TYPE, HEAD_VALUE)&#13;
                .addHeader(HEADER_X_PRODIA_KEY, API_KEY)&#13;
                .build();&#13;
        try (Response response = CLIENT.newCall(request).execute()) {&#13;
            if (response.isSuccessful() &amp;&amp; response.body() != null) {&#13;
                JSONObject jsonObject = JSONObject.parseObject(response.body().string());&#13;
                String jobId = jsonObject.getString('job');&#13;
                return getJobDetails(jobId);&#13;
            }&#13;
            throw new IOException('Request failed: ' + response.code() + ' ' + response.message());&#13;
        } catch (InterruptedException e) {&#13;
            return e.getMessage();&#13;
        }&#13;
    }&#13;
&#13;
    /**&#13;
     * 获取任务详情&#13;
     *&#13;
     * @param jobId 任务ID&#13;
     * @return 图片地址&#13;
     */&#13;
    private static String getJobDetails(String jobId) throws IOException, InterruptedException {&#13;
        // 构建请求URL&#13;
        String url = String.format(BASE_URL, jobId);&#13;
        // 构建请求&#13;
        Request request = new Request.Builder()&#13;
                .url(url)&#13;
                .get()&#13;
                .addHeader(HEAD_ACCEPT, HEAD_VALUE)&#13;
                .addHeader(HEADER_X_PRODIA_KEY, API_KEY)&#13;
                .build();&#13;
        boolean isComplete = false;&#13;
        String imageUrl = null;&#13;
        // 开始轮询&#13;
        while (!isComplete) {&#13;
            // 执行请求并处理响应&#13;
            try (Response response = CLIENT.newCall(request).execute()) {&#13;
                if (response.isSuccessful() &amp;&amp; response.body() != null) {&#13;
                    // 读取响应体内容&#13;
                    String res = response.body().string();&#13;
                    JSONObject jsonObject = JSONObject.parseObject(res);&#13;
                    String status = jsonObject.getString('status');&#13;
                    // 检查作业状态&#13;
                    if ('succeeded'.equals(status)) {&#13;
                        isComplete = true;&#13;
                        imageUrl = jsonObject.getString('imageUrl');&#13;
                    } else if ('failed'.equals(status)) {&#13;
                        throw new IOException('Job failed: ' + jobId);&#13;
                    }&#13;
                } else {&#13;
                    throw new IOException('Request failed: ' + response.code() + ' ' + response.message());&#13;
                }&#13;
            }&#13;
            if (!isComplete) {&#13;
                Thread.sleep(POLL_INTERVAL_MS);&#13;
            }&#13;
        }&#13;
        return imageUrl;&#13;
    }&#13;
}&#13;
```&#13;
&#13;
**第五步**&#13;
&#13;
配合前端vue使用&#13;
&#13;
前端代码我就直接粘贴了，就不多做解释了&#13;
&#13;
```vue&#13;
&lt;template&gt;&#13;
  &lt;div id='app'&gt;&#13;
    &lt;div class='chat-container' style='height: 820px; max-width: 1350px'&gt;&#13;
      &lt;div class='selection'&gt;&#13;
        &lt;div class='container'&gt;&#13;
          &lt;div class='settings2' @click='chat'&gt;&lt;span style='color: #c05ee7'&gt;&lt;b&gt;切换AI对话&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&#13;
          &lt;div class='settings2' @click='newChat'&gt;&lt;span style='color: #2f8099'&gt;&lt;b&gt;新版AI对话&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&#13;
        &lt;/div&gt;&#13;
        &lt;div class='container'&gt;&#13;
          &lt;div class='settings2' @click='Dalle3'&gt;&lt;span style='color: #69a142'&gt;&lt;b&gt;切换D3绘画&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&#13;
          &lt;div class='settings2' @click='Midj'&gt;&lt;span style='color: #c65930'&gt;&lt;b&gt;切换MJ绘画&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&#13;
        &lt;/div&gt;&#13;
&#13;
        &lt;h3&gt;模型选择&lt;/h3&gt;&#13;
        &lt;el-select v-model='buildObject.model' placeholder='请选择模型'&gt;&#13;
          &lt;el-option&#13;
              v-for='item in models'&#13;
              :key='item.value'&#13;
              :label='item.label'&#13;
              :value='item.value'&gt;&#13;
          &lt;/el-option&gt;&#13;
        &lt;/el-select&gt;&#13;
&#13;
        &lt;h3&gt;样式预设&lt;/h3&gt;&#13;
        &lt;el-select v-model='buildObject.style_preset' placeholder='请选择预设'&gt;&#13;
          &lt;el-option&#13;
              v-for='item in presets'&#13;
              :key='item.value'&#13;
              :label='item.label'&#13;
              :value='item.value'&gt;&#13;
            &lt;span style='float: left'&gt;{{ item.label }}&lt;/span&gt;&#13;
            &lt;span style='float: right; color: #8492a6; font-size: 13px'&gt;{{ item.value }}&lt;/span&gt;&#13;
          &lt;/el-option&gt;&#13;
        &lt;/el-select&gt;&#13;
&#13;
        &lt;div class='block'&gt;&#13;
          &lt;h3&gt;steps 步骤&lt;/h3&gt;&#13;
          &lt;el-slider v-model='buildObject.steps' style='width: 70%;margin-left: 15%'&gt;&lt;/el-slider&gt;&#13;
        &lt;/div&gt;&#13;
&#13;
        &lt;h3&gt;采样器&lt;/h3&gt;&#13;
        &lt;el-select v-model='buildObject.sampler' placeholder='请选择采样器'&gt;&#13;
          &lt;el-option&#13;
              v-for='item in samplers'&#13;
              :key='item.value'&#13;
              :label='item.label'&#13;
              :value='item.value'&gt;&#13;
          &lt;/el-option&gt;&#13;
        &lt;/el-select&gt;&#13;
&#13;
        &lt;el-tooltip placement='top'&gt;&#13;
          &lt;div slot='content'&gt;为获得最佳性能，请使用以下分辨率之一&lt;br/&gt;1024x1024、1152x896、1216x832、1344x768、1536x640、640x1536、768x1344、832x1216&lt;/div&gt;&#13;
          &lt;h3&gt;图像宽度&lt;/h3&gt;&#13;
        &lt;/el-tooltip&gt;&#13;
        &lt;el-select v-model='buildObject.width' placeholder='请选择图片宽度'&gt;&#13;
          &lt;el-option&#13;
              v-for='item in widths'&#13;
              :key='item.value'&#13;
              :label='item.label'&#13;
              :value='item.value'&gt;&#13;
          &lt;/el-option&gt;&#13;
        &lt;/el-select&gt;&#13;
&#13;
        &lt;el-tooltip placement='top'&gt;&#13;
          &lt;div slot='content'&gt;为获得最佳性能，请使用以下分辨率之一&lt;br/&gt;1024x1024、1152x896、1216x832、1344x768、1536x640、640x1536、768x1344、832x1216&lt;/div&gt;&#13;
          &lt;h3&gt;图像高度&lt;/h3&gt;&#13;
        &lt;/el-tooltip&gt;&#13;
        &lt;el-select v-model='buildObject.height' placeholder='请选择图片高度'&gt;&#13;
          &lt;el-option&#13;
              v-for='item in widths'&#13;
              :key='item.value'&#13;
              :label='item.label'&#13;
              :value='item.value'&gt;&#13;
          &lt;/el-option&gt;&#13;
        &lt;/el-select&gt;&#13;
&#13;
&#13;
&#13;
&#13;
      &lt;/div&gt;&#13;
&#13;
      &lt;div class='chat-window'&gt;&#13;
        &lt;div class='chat-header'&gt;&#13;
          StableDiffusion绘画&#13;
        &lt;/div&gt;&#13;
        &lt;div class='chat-messages' id='chatMessages'&gt;&#13;
          &lt;div v-for='message in messages' :key='message.id' class='message-row'&#13;
               :class='{ 'user-row': message.is_user, 'system-row': !message.is_user }'&gt;&#13;
            &lt;!-- 系统消息头像 --&gt;&#13;
            &lt;img v-if='!message.is_user' :src='system' class='avatar system-avatar' alt='System Avatar'&gt;&#13;
            &lt;!-- 消息内容 --&gt;&#13;
            &lt;div class='message' :class='{ 'user-message': message.is_user, 'system-message': !message.is_user }'&gt;&#13;
              &lt;div v-if='message.loading' class='loading-box'&gt;&#13;
                &lt;div class='loader'&gt;&lt;/div&gt; &lt;!-- 简单的加载动画 --&gt;&#13;
              &lt;/div&gt;&#13;
              &lt;div v-else-if='Array.isArray(message.content)'&gt;&#13;
                &lt;div v-for='(url, index) in message.content' :key='index' class='image-box'&gt;&#13;
&lt;!--                  &lt;el-image--&gt;&#13;
&lt;!--                      style='width: 200px; height: 200px; margin: 5px;'--&gt;&#13;
&lt;!--                      :src='url'--&gt;&#13;
&lt;!--                      fit='cover'--&gt;&#13;
&lt;!--                      @click='handleImageClick(url)'--&gt;&#13;
&lt;!--                  &gt;&lt;/el-image&gt;--&gt;&#13;
                  &lt;a :href='url' target='_blank'&gt;{{ url }}&lt;/a&gt;&#13;
                &lt;/div&gt;&#13;
              &lt;/div&gt;&#13;
              &lt;div v-else&gt;&#13;
                {{ message.content }}&#13;
              &lt;/div&gt;&#13;
            &lt;/div&gt;&#13;
            &lt;!-- 用户消息头像 --&gt;&#13;
            &lt;img v-if='message.is_user' :src='user' class='avatar user-avatar' alt='User Avatar'&gt;&#13;
          &lt;/div&gt;&#13;
        &lt;/div&gt;&#13;
        &lt;div class='chat-input'&gt;&#13;
          &lt;input type='text' v-model='newMessage' @keydown.enter='sendMessage' placeholder='请输入想要绘画的物体'&#13;
                 class='input-message'&gt;&#13;
          &lt;button @click='sendMessage' class='send-button'&gt;发送&lt;/button&gt;&#13;
        &lt;/div&gt;&#13;
      &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&#13;
    &lt;el-dialog :visible.sync='dialogVisible'&gt;&#13;
      &lt;el-image :src='dialogImageUrl' style='width: 100%;'&gt;&lt;/el-image&gt;&#13;
    &lt;/el-dialog&gt;&#13;
  &lt;/div&gt;&#13;
&lt;/template&gt;&#13;
&#13;
&lt;script&gt;&#13;
&#13;
export default {&#13;
  data() {&#13;
    return {&#13;
      system: require('@/assets/system.png'),&#13;
      user: require('@/assets/user.png'),&#13;
      newMessage: '',&#13;
      messages: [],&#13;
      nextMessageId: 1,&#13;
      loading: false, // 用于跟踪图片加载状态&#13;
      imageUrls: [], // 用于存储从服务器响应获得的图片链接&#13;
      dialogImageUrl: '', // 当前点击的图片的URL&#13;
      dialogVisible: false, // 控制模态框的显示&#13;
&#13;
&#13;
      models: [{&#13;
        value: 'dreamshaperXL10_alpha2.safetensors [c8afe2ef]',&#13;
        label: 'dreamshaperXL10_alpha2.safetensors [c8afe2ef]'&#13;
      }, {&#13;
        value: 'dynavisionXL_0411.safetensors [c39cc051]',&#13;
        label: 'dynavisionXL_0411.safetensors [c39cc051]'&#13;
      }, {&#13;
        value: 'juggernautXL_v45.safetensors [e75f5471]',&#13;
        label: 'juggernautXL_v45.safetensors [e75f5471]'&#13;
      }, {&#13;
        value: 'realismEngineSDXL_v10.safetensors [af771c3f]',&#13;
        label: 'realismEngineSDXL_v10.safetensors [af771c3f]'&#13;
      }, {&#13;
        value: 'sd_xl_base_1.0.safetensors [be9edd61]',&#13;
        label: 'sd_xl_base_1.0.safetensors [be9edd61]'&#13;
      },],&#13;
&#13;
      presets: [ { value: '3d-model', label: '3D模型' },&#13;
        { value: 'analog-film', label: '胶片' },&#13;
        { value: 'anime', label: '动漫' },&#13;
        { value: 'cinematic', label: '电影化的' },&#13;
        { value: 'comic-book', label: '漫画书' },&#13;
        { value: 'digital-art', label: '数字艺术' },&#13;
        { value: 'enhance', label: '增强' },&#13;
        { value: 'fantasy-art', label: '奇幻艺术' },&#13;
        { value: 'isometric', label: '等轴测' },&#13;
        { value: 'line-art', label: '线描' },&#13;
        { value: 'low-poly', label: '低多边形' },&#13;
        { value: 'neon-punk', label: '霓虹朋克' },&#13;
        { value: 'origami', label: '折纸' },&#13;
        { value: 'photographic', label: '摄影的' },&#13;
        { value: 'pixel-art', label: '像素艺术' },&#13;
        { value: 'texture', label: '纹理' },&#13;
        { value: 'craft-clay', label: '手工陶土' }],&#13;
&#13;
      samplers:[&#13;
        { value: 'Euler', label: 'Euler' },&#13;
        { value: 'Euler_a', label: 'Euler a' },&#13;
        { value: 'LMS', label: 'LMS' },&#13;
        { value: 'Heun', label: 'Heun' },&#13;
        { value: 'DPM2', label: 'DPM2' },&#13;
        { value: 'DPM2_a', label: 'DPM2 a' },&#13;
        { value: 'DPM2S_a', label: 'DPM++ 2S a' },&#13;
        { value: 'DPM2M', label: 'DPM++ 2M' },&#13;
        { value: 'DPMSDE', label: 'DPM++ SDE' },&#13;
        { value: 'DPM_fast', label: 'DPM fast' },&#13;
        { value: 'DPM_adaptive', label: 'DPM adaptive' },&#13;
        { value: 'LMS_Karras', label: 'LMS Karras' },&#13;
        { value: 'DPM2_Karras', label: 'DPM2 Karras' },&#13;
        { value: 'DPM2_a_Karras', label: 'DPM2 a Karras' },&#13;
        { value: 'DPM2S_a_Karras', label: 'DPM++ 2S a Karras' },&#13;
        { value: 'DPM2M_Karras', label: 'DPM++ 2M Karras' },&#13;
        { value: 'DPMSDE_Karras', label: 'DPM++ SDE Karras' }&#13;
      ],&#13;
&#13;
      widths:[&#13;
        {label:'1024',value:'1024'},&#13;
        {label:'1152',value:'1152'},&#13;
        {label:'1216',value:'1216'},&#13;
        {label:'1344',value:'1344'},&#13;
        {label:'1536',value:'1536'},&#13;
        {label:'640',value:'640'},&#13;
        {label:'768',value:'768'},&#13;
        {label:'832',value:'832'},&#13;
      ],&#13;
&#13;
      heights:[&#13;
        {label:'1024',value:'1024'},&#13;
        {label:'896',value:'896'},&#13;
        {label:'832',value:'832'},&#13;
        {label:'768',value:'768'},&#13;
        {label:'640',value:'640'},&#13;
        {label:'1536',value:'1536'},&#13;
        {label:'1344',value:'1344'},&#13;
        {label:'1216',value:'1216'},&#13;
      ],&#13;
&#13;
        buildObject: {&#13;
          model: 'sd_xl_base_1.0.safetensors [be9edd61]',&#13;
          prompt: '',&#13;
          negative_prompt: 'badly drawn',&#13;
          style_preset: 'analog-film',&#13;
          steps: 25,&#13;
          cfg_scale: 7,&#13;
          seed: -1,&#13;
          sampler: 'DPM++ 2M Karras',&#13;
          width: 1024,&#13;
          height: 1024&#13;
        }&#13;
&#13;
    };&#13;
  },&#13;
  created() {&#13;
    this.messages.push({&#13;
      loading: false,&#13;
      is_user: false,&#13;
      id: this.nextMessageId++,&#13;
      content: '请描述你想要的图片，怕你们搞黄，请自行在浏览器打开',&#13;
    });&#13;
    this.messages.push({&#13;
      loading: false,&#13;
      is_user: false,&#13;
      id: this.nextMessageId++,&#13;
      content: '最好更改所需要的样式预设哦，默认是胶片，胶片图片质量好，但是加载慢。</description><guid isPermaLink="true">https://xliking.github.io/post/SpringBoot-ji-cheng-Midjourney-hui-hua.html</guid><pubDate>Fri, 28 Jun 2024 08:07:26 +0000</pubDate></item><item><title>SpingBoot集成xxl-job</title><link>https://xliking.github.io/post/SpingBoot-ji-cheng-xxl-job.html</link><description>**第一步**&#13;
xxl-job，有单独的数据库，把对应的表导入进去&#13;
**第二步**&#13;
编写springboot中的配置文件&#13;
```&#13;
xxl:&#13;
  enable: true  # 是否启用 XXL-JOB，true 表示启用，false 表示禁用&#13;
  job:&#13;
    admin:&#13;
      addresses: http://xxl-job-xxx:8080/xxl-job-admin/  # XXL-JOB 管理中心的地址，用于任务的管理和调度&#13;
    executor:&#13;
      app-name: financial-data-center  # 执行器的应用名称，用于标识具体的执行器&#13;
      access-token: xxxxxx  # 访问令牌，用于执行器与调度中心之间的身份认证&#13;
      log-path: ./logs/xxlJob  # 执行器日志的存储路径，相对于当前工作目录&#13;
      log-retention-days: 7  # 日志的保留天数，超过这个天数的日志将被自动清理&#13;
```&#13;
**第三步**&#13;
编写xxl-job的配置文件，通过读取配置文件中的相关参数，创建并初始化一个 XxlJobSpringExecutor 实例&#13;
```&#13;
/**&#13;
 * xxl job配置&#13;
 * @author 木池&#13;
 */&#13;
@Component&#13;
@Slf4j&#13;
@ConditionalOnProperty(prefix = 'xxl', name = 'enable', havingValue = 'true', matchIfMissing = true)&#13;
public class XxlJobConfig {&#13;
&#13;
    @Value('${xxl.job.admin.addresses}')&#13;
    private String adminAddresses;&#13;
&#13;
    @Value('${xxl.job.executor.app-name}')&#13;
    private String appName;&#13;
&#13;
    @Value('${xxl.job.executor.log-retention-days}')&#13;
    private Integer logRetentionDay;&#13;
&#13;
    @Value('${xxl.job.executor.access-token}')&#13;
    private String accessToken;&#13;
&#13;
    @Value('${xxl.job.executor.log-path}')&#13;
    private String logPath;&#13;
&#13;
    @Bean&#13;
    public XxlJobSpringExecutor xxlJobExecutor() {&#13;
        log.info('&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; xxl-job config init.');&#13;
        XxlJobSpringExecutor xxlJobSpringExecutor = new XxlJobSpringExecutor();&#13;
        xxlJobSpringExecutor.setAdminAddresses(adminAddresses);&#13;
        xxlJobSpringExecutor.setAppname(appName);&#13;
        xxlJobSpringExecutor.setAccessToken(accessToken);&#13;
        xxlJobSpringExecutor.setLogPath(logPath);&#13;
        xxlJobSpringExecutor.setLogRetentionDays(logRetentionDay);&#13;
        return xxlJobSpringExecutor;&#13;
    }&#13;
}&#13;
&#13;
```&#13;
**第四步**&#13;
编写xxl-job的定时任务&#13;
```&#13;
/**&#13;
 * @author 木池&#13;
 */&#13;
@Component&#13;
@AllArgsConstructor&#13;
public class XxlJobTask {&#13;
    @XxlJob('cs')&#13;
    public ReturnT&lt;String&gt; cs() {&#13;
        LOGGER.info('测试');&#13;
        return ReturnT.SUCCESS;&#13;
    }&#13;
}&#13;
```&#13;
**另提 - 如何获取xxl-job的多个参数**&#13;
```&#13;
  String param = XxlJobHelper.getJobParam();&#13;
  String[] methodParams = param.split(',');&#13;
```。</description><guid isPermaLink="true">https://xliking.github.io/post/SpingBoot-ji-cheng-xxl-job.html</guid><pubDate>Fri, 28 Jun 2024 07:46:33 +0000</pubDate></item><item><title>SpingBoot如何获取当前路径</title><link>https://xliking.github.io/post/SpingBoot-ru-he-huo-qu-dang-qian-lu-jing.html</link><description>**第一**&#13;
`  String path = System.getProperty('user.dir')+'upload/';`&#13;
**第二**&#13;
```&#13;
  其中 servletContext 需要注入&#13;
  private final ServletContext servletContext;&#13;
&#13;
  String path = servletContext.getRealPath('upload/');&#13;
```&#13;
**总结**&#13;
第一种方法更适合独立的Java应用程序，不依赖Web容器。</description><guid isPermaLink="true">https://xliking.github.io/post/SpingBoot-ru-he-huo-qu-dang-qian-lu-jing.html</guid><pubDate>Fri, 28 Jun 2024 07:35:40 +0000</pubDate></item><item><title>SpingBoot实现注解导出Excel文件</title><link>https://xliking.github.io/post/SpingBoot-shi-xian-zhu-jie-dao-chu-Excel-wen-jian.html</link><description>**第一步，导入poi的Maven依赖**&#13;
```&#13;
        &lt;dependency&gt;&#13;
            &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;&#13;
            &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;&#13;
            &lt;version&gt;5.2.3&lt;/version&gt;&#13;
        &lt;/dependency&gt;&#13;
```&#13;
**第二步，实现自定义注解**&#13;
&#13;
```&#13;
@Retention(RetentionPolicy.RUNTIME)&#13;
@Target(ElementType.FIELD)&#13;
public @interface ExcelColumn {&#13;
    String value() default '';&#13;
&#13;
}&#13;
```&#13;
**第三步，编写导出的工具类**&#13;
&#13;
```&#13;
&#13;
/**&#13;
 * 类上面的字段 -&gt; 加上  @ExcelColumn('表头') 的注解&#13;
 * @author 木池&#13;
 */&#13;
@Slf4j&#13;
public class ExcelUtil {&#13;
&#13;
    public static &lt;T&gt; void write(List&lt;T&gt; objectList, OutputStream fileOut) {&#13;
&#13;
        Workbook workbook = new XSSFWorkbook();&#13;
        try {&#13;
            Sheet sheet = workbook.createSheet('Sheet1');&#13;
            createHeader(sheet, objectList.get(0).getClass());&#13;
            createRows(sheet, objectList);&#13;
            workbook.write(fileOut);&#13;
        } catch (IOException e) {&#13;
            log.error('Error writing to Excel file: {}', e.getMessage());&#13;
        } finally {&#13;
            try {&#13;
                fileOut.close();&#13;
                workbook.close();&#13;
            } catch (IOException e) {&#13;
                throw new RuntimeException(e);&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    /**&#13;
     * 写入Excel文件 Sheet1 中&#13;
     * @param objectList 存储对象的集合&#13;
     * @param filePath 文件路径 为空 则是桌面路径&#13;
     * @return 文件路径&#13;
     * @param &lt;T&gt; 泛型&#13;
     */&#13;
    public static &lt;T&gt; String writeToExcel(List&lt;T&gt; objectList, String filePath) {&#13;
        if (filePath == null || filePath.isEmpty()) {&#13;
            filePath = getDefaultDesktopPath() + '\\' + objectList.get(0).getClass().getSimpleName() + '.xlsx';&#13;
        }&#13;
        byte[] utf8Bytes = filePath.getBytes(StandardCharsets.UTF_8);&#13;
        String newFileName = new String(utf8Bytes, StandardCharsets.UTF_8);&#13;
        try (Workbook workbook = new XSSFWorkbook(); FileOutputStream fileOut = new FileOutputStream(newFileName)) {&#13;
            Sheet sheet = workbook.createSheet('Sheet1');&#13;
            Font font = getFont(sheet);&#13;
            createHeader(sheet, objectList.get(0).getClass(), font);&#13;
            createRows(sheet, objectList);&#13;
//            autoSizeColumns(sheet);&#13;
            workbook.write(fileOut);&#13;
        } catch (IOException e) {&#13;
            log.error('Error writing to Excel file: {}', e.getMessage());&#13;
        }&#13;
        return newFileName;&#13;
    }&#13;
&#13;
    /**&#13;
     * 创建表头&#13;
     * @param sheet 表单对象&#13;
     * @param clazz 类对象&#13;
     * @param &lt;T&gt; 泛型&#13;
     */&#13;
    private static &lt;T&gt; void createHeader(Sheet sheet, Class&lt;T&gt; clazz) {&#13;
        createHeader(sheet, clazz, null);&#13;
    }&#13;
&#13;
    private static &lt;T&gt; void createHeader(Sheet sheet, Class&lt;T&gt; clazz, Font headerFont) {&#13;
&#13;
        CellStyle headerCellStyle = sheet.getWorkbook().createCellStyle();&#13;
        if (null != headerFont) {&#13;
            headerCellStyle.setFont(headerFont);&#13;
        }&#13;
&#13;
        Row headerRow = sheet.createRow(0);&#13;
        List&lt;String&gt; propertyNames = new ArrayList&lt;&gt;();&#13;
        for (Field field : clazz.getDeclaredFields()) {&#13;
            ExcelColumn excelColumnAnnotation = field.getAnnotation(ExcelColumn.class);&#13;
            if (excelColumnAnnotation != null) {&#13;
                propertyNames.add(excelColumnAnnotation.value());&#13;
            }&#13;
        }&#13;
        int cellNum = 0;&#13;
        for (String propertyName : propertyNames) {&#13;
            Cell headerCell = headerRow.createCell(cellNum++);&#13;
            headerCell.setCellValue(propertyName);&#13;
            headerCell.setCellStyle(headerCellStyle);&#13;
        }&#13;
    }&#13;
&#13;
    private static @NotNull Font getFont(Sheet sheet) {&#13;
        Font headerFont = sheet.getWorkbook().createFont();&#13;
        headerFont.setBold(true);&#13;
        headerFont.setFontHeightInPoints((short) 14);&#13;
        return headerFont;&#13;
    }&#13;
&#13;
    /**&#13;
     * 创建每行的数据&#13;
     * @param sheet 表单&#13;
     * @param objectList 对象集合&#13;
     * @param &lt;T&gt; 泛型&#13;
     */&#13;
    private static &lt;T&gt; void createRows(Sheet sheet, List&lt;T&gt; objectList) {&#13;
        int rowNum = 1;&#13;
        for (T object : objectList) {&#13;
            Row row = sheet.createRow(rowNum++);&#13;
            int cellNum = 0;&#13;
            for (Field field : object.getClass().getDeclaredFields()) {&#13;
                ExcelColumn excelColumnAnnotation = field.getAnnotation(ExcelColumn.class);&#13;
                if (excelColumnAnnotation != null) {&#13;
                    field.setAccessible(true);&#13;
                    try {&#13;
                        Object value = field.get(object);&#13;
                        Cell cell = row.createCell(cellNum++);&#13;
                        if (value != null) {&#13;
                            if (value instanceof String) {&#13;
                                cell.setCellValue((String) value);&#13;
                            } else if (value instanceof Number) {&#13;
                                cell.setCellValue(((Number) value).doubleValue());&#13;
                            } else if (value instanceof Boolean) {&#13;
                                cell.setCellValue((Boolean) value);&#13;
                            } else {&#13;
                                cell.setCellValue(value.toString());&#13;
                            }&#13;
                        } else {&#13;
                            cell.setCellValue('');&#13;
                        }&#13;
                    } catch (IllegalAccessException e) {&#13;
                        log.error('Error accessing field: {}', e.getMessage());&#13;
                    }&#13;
                }&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    private static void autoSizeColumns(Sheet sheet) {&#13;
        for (int i = 0; i &lt; sheet.getRow(0).getLastCellNum(); i++) {&#13;
            sheet.autoSizeColumn(i);&#13;
        }&#13;
    }&#13;
&#13;
    private static String getDefaultDesktopPath() {&#13;
        return System.getProperty('user.home') + '\\Desktop';&#13;
    }&#13;
&#13;
    /**&#13;
     *  kimi 不能超过 131072 字数&#13;
     * 计算Excel文件中的字数,只适合 Excel文件格式,不包含空格 和 特殊符号&#13;
     * @param filePath 文件路径&#13;
     * @return 字数&#13;
     */&#13;
    public static int getWordCount(String filePath) {&#13;
        Path excelPath = Paths.get(filePath);&#13;
        try (InputStream fis = Files.newInputStream(excelPath);&#13;
             Workbook workbook = new XSSFWorkbook(fis)) {&#13;
            int wordCount = 0;&#13;
            for (Sheet sheet : workbook) {&#13;
                for (Row row : sheet) {&#13;
                    for (Cell cell : row) {&#13;
                        if (cell.getCellType() == CellType.STRING) {&#13;
                            String cellValue = cell.getStringCellValue();&#13;
                            if (cellValue != null) {&#13;
                                wordCount += cellValue.length();&#13;
                            }&#13;
                        }&#13;
                    }&#13;
                }&#13;
            }&#13;
            return wordCount;&#13;
        } catch (IOException e) {&#13;
            return 0;&#13;
        }&#13;
    }&#13;
&#13;
}&#13;
&#13;
```。</description><guid isPermaLink="true">https://xliking.github.io/post/SpingBoot-shi-xian-zhu-jie-dao-chu-Excel-wen-jian.html</guid><pubDate>Thu, 27 Jun 2024 11:30:46 +0000</pubDate></item></channel></rss>