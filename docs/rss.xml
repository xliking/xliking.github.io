<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>木池</title><link>https://xliking.github.io</link><description>JAVA日常笔记</description><copyright>木池</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://xlike.email/images/tx.jpg</url><title>avatar</title><link>https://xliking.github.io</link></image><lastBuildDate>Thu, 27 Jun 2024 11:43:15 +0000</lastBuildDate><managingEditor>木池</managingEditor><ttl>60</ttl><webMaster>木池</webMaster><item><title>SpingBoot实现注解导出Excel文件</title><link>https://xliking.github.io/post/SpingBoot-shi-xian-zhu-jie-dao-chu-Excel-wen-jian.html</link><description>**第一步，导入poi的Maven依赖**&#13;
```&#13;
        &lt;dependency&gt;&#13;
            &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;&#13;
            &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;&#13;
            &lt;version&gt;5.2.3&lt;/version&gt;&#13;
        &lt;/dependency&gt;&#13;
```&#13;
**第二步，实现自定义注解**&#13;
&#13;
```&#13;
@Retention(RetentionPolicy.RUNTIME)&#13;
@Target(ElementType.FIELD)&#13;
public @interface ExcelColumn {&#13;
    String value() default '';&#13;
&#13;
}&#13;
```&#13;
**第三步，编写导出的工具类**&#13;
&#13;
```&#13;
&#13;
/**&#13;
 * 类上面的字段 -&gt; 加上  @ExcelColumn('表头') 的注解&#13;
 * @author 木池&#13;
 */&#13;
@Slf4j&#13;
public class ExcelUtil {&#13;
&#13;
    public static &lt;T&gt; void write(List&lt;T&gt; objectList, OutputStream fileOut) {&#13;
&#13;
        Workbook workbook = new XSSFWorkbook();&#13;
        try {&#13;
            Sheet sheet = workbook.createSheet('Sheet1');&#13;
            createHeader(sheet, objectList.get(0).getClass());&#13;
            createRows(sheet, objectList);&#13;
            workbook.write(fileOut);&#13;
        } catch (IOException e) {&#13;
            log.error('Error writing to Excel file: {}', e.getMessage());&#13;
        } finally {&#13;
            try {&#13;
                fileOut.close();&#13;
                workbook.close();&#13;
            } catch (IOException e) {&#13;
                throw new RuntimeException(e);&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    /**&#13;
     * 写入Excel文件 Sheet1 中&#13;
     * @param objectList 存储对象的集合&#13;
     * @param filePath 文件路径 为空 则是桌面路径&#13;
     * @return 文件路径&#13;
     * @param &lt;T&gt; 泛型&#13;
     */&#13;
    public static &lt;T&gt; String writeToExcel(List&lt;T&gt; objectList, String filePath) {&#13;
        if (filePath == null || filePath.isEmpty()) {&#13;
            filePath = getDefaultDesktopPath() + '\\' + objectList.get(0).getClass().getSimpleName() + '.xlsx';&#13;
        }&#13;
        byte[] utf8Bytes = filePath.getBytes(StandardCharsets.UTF_8);&#13;
        String newFileName = new String(utf8Bytes, StandardCharsets.UTF_8);&#13;
        try (Workbook workbook = new XSSFWorkbook(); FileOutputStream fileOut = new FileOutputStream(newFileName)) {&#13;
            Sheet sheet = workbook.createSheet('Sheet1');&#13;
            Font font = getFont(sheet);&#13;
            createHeader(sheet, objectList.get(0).getClass(), font);&#13;
            createRows(sheet, objectList);&#13;
//            autoSizeColumns(sheet);&#13;
            workbook.write(fileOut);&#13;
        } catch (IOException e) {&#13;
            log.error('Error writing to Excel file: {}', e.getMessage());&#13;
        }&#13;
        return newFileName;&#13;
    }&#13;
&#13;
    /**&#13;
     * 创建表头&#13;
     * @param sheet 表单对象&#13;
     * @param clazz 类对象&#13;
     * @param &lt;T&gt; 泛型&#13;
     */&#13;
    private static &lt;T&gt; void createHeader(Sheet sheet, Class&lt;T&gt; clazz) {&#13;
        createHeader(sheet, clazz, null);&#13;
    }&#13;
&#13;
    private static &lt;T&gt; void createHeader(Sheet sheet, Class&lt;T&gt; clazz, Font headerFont) {&#13;
&#13;
        CellStyle headerCellStyle = sheet.getWorkbook().createCellStyle();&#13;
        if (null != headerFont) {&#13;
            headerCellStyle.setFont(headerFont);&#13;
        }&#13;
&#13;
        Row headerRow = sheet.createRow(0);&#13;
        List&lt;String&gt; propertyNames = new ArrayList&lt;&gt;();&#13;
        for (Field field : clazz.getDeclaredFields()) {&#13;
            ExcelColumn excelColumnAnnotation = field.getAnnotation(ExcelColumn.class);&#13;
            if (excelColumnAnnotation != null) {&#13;
                propertyNames.add(excelColumnAnnotation.value());&#13;
            }&#13;
        }&#13;
        int cellNum = 0;&#13;
        for (String propertyName : propertyNames) {&#13;
            Cell headerCell = headerRow.createCell(cellNum++);&#13;
            headerCell.setCellValue(propertyName);&#13;
            headerCell.setCellStyle(headerCellStyle);&#13;
        }&#13;
    }&#13;
&#13;
    private static @NotNull Font getFont(Sheet sheet) {&#13;
        Font headerFont = sheet.getWorkbook().createFont();&#13;
        headerFont.setBold(true);&#13;
        headerFont.setFontHeightInPoints((short) 14);&#13;
        return headerFont;&#13;
    }&#13;
&#13;
    /**&#13;
     * 创建每行的数据&#13;
     * @param sheet 表单&#13;
     * @param objectList 对象集合&#13;
     * @param &lt;T&gt; 泛型&#13;
     */&#13;
    private static &lt;T&gt; void createRows(Sheet sheet, List&lt;T&gt; objectList) {&#13;
        int rowNum = 1;&#13;
        for (T object : objectList) {&#13;
            Row row = sheet.createRow(rowNum++);&#13;
            int cellNum = 0;&#13;
            for (Field field : object.getClass().getDeclaredFields()) {&#13;
                ExcelColumn excelColumnAnnotation = field.getAnnotation(ExcelColumn.class);&#13;
                if (excelColumnAnnotation != null) {&#13;
                    field.setAccessible(true);&#13;
                    try {&#13;
                        Object value = field.get(object);&#13;
                        Cell cell = row.createCell(cellNum++);&#13;
                        if (value != null) {&#13;
                            if (value instanceof String) {&#13;
                                cell.setCellValue((String) value);&#13;
                            } else if (value instanceof Number) {&#13;
                                cell.setCellValue(((Number) value).doubleValue());&#13;
                            } else if (value instanceof Boolean) {&#13;
                                cell.setCellValue((Boolean) value);&#13;
                            } else {&#13;
                                cell.setCellValue(value.toString());&#13;
                            }&#13;
                        } else {&#13;
                            cell.setCellValue('');&#13;
                        }&#13;
                    } catch (IllegalAccessException e) {&#13;
                        log.error('Error accessing field: {}', e.getMessage());&#13;
                    }&#13;
                }&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    private static void autoSizeColumns(Sheet sheet) {&#13;
        for (int i = 0; i &lt; sheet.getRow(0).getLastCellNum(); i++) {&#13;
            sheet.autoSizeColumn(i);&#13;
        }&#13;
    }&#13;
&#13;
    private static String getDefaultDesktopPath() {&#13;
        return System.getProperty('user.home') + '\\Desktop';&#13;
    }&#13;
&#13;
    /**&#13;
     *  kimi 不能超过 131072 字数&#13;
     * 计算Excel文件中的字数,只适合 Excel文件格式,不包含空格 和 特殊符号&#13;
     * @param filePath 文件路径&#13;
     * @return 字数&#13;
     */&#13;
    public static int getWordCount(String filePath) {&#13;
        Path excelPath = Paths.get(filePath);&#13;
        try (InputStream fis = Files.newInputStream(excelPath);&#13;
             Workbook workbook = new XSSFWorkbook(fis)) {&#13;
            int wordCount = 0;&#13;
            for (Sheet sheet : workbook) {&#13;
                for (Row row : sheet) {&#13;
                    for (Cell cell : row) {&#13;
                        if (cell.getCellType() == CellType.STRING) {&#13;
                            String cellValue = cell.getStringCellValue();&#13;
                            if (cellValue != null) {&#13;
                                wordCount += cellValue.length();&#13;
                            }&#13;
                        }&#13;
                    }&#13;
                }&#13;
            }&#13;
            return wordCount;&#13;
        } catch (IOException e) {&#13;
            return 0;&#13;
        }&#13;
    }&#13;
&#13;
}&#13;
&#13;
```。</description><guid isPermaLink="true">https://xliking.github.io/post/SpingBoot-shi-xian-zhu-jie-dao-chu-Excel-wen-jian.html</guid><pubDate>Thu, 27 Jun 2024 11:30:46 +0000</pubDate></item></channel></rss>